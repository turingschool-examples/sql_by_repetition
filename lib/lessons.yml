1:
  title: Select All Columns
  text: >
    Let's start by writing an SQL statement that will return every row and every column of a specific table.
    Assuming that a table of data exists, we can use the syntax <b class="code">SELECT * FROM table_name;</b>
    where the * represents all columns. It is conventional to capitalize words like SELECT and FROM, but
    you'll get the same result if they are lowercase. <br><br> Before you look at the "Your Turn" section, you're
    encouraged to try out the examples you see below in the console. After you finish typing, hit the ENTER key
    and your results will appear in tabular format below the console.
  examples:
    - SELECT * FROM customers;
    - SELECT * FROM invoice_items;
  tasks:
    - question: Return all info from the tracks table.
      answer: SELECT * FROM tracks;
    - question: Return all info from the albums table.
      answer: SELECT * FROM albums;
    - question: Return all info from the invoices table.
      answer: SELECT * FROM invoices;
    - question: Return all info from the artists table.
      answer: SELECT * FROM artists;
    - question: Return all info from the customers table.
      answer: SELECT * FROM customers;
    - question: Return all info from the employees table.
      answer: SELECT * FROM employees;
    - question: Return all info from the genres table.
      answer: SELECT * FROM genres;
2:
  title: Select One Column
  text: >
    Now that you know how to select all of the data from a table, let's learn how to limit the results to
    certain columns. We can do this using the following syntax: <b class="code">SELECT column_name FROM
    table_name;</b> where column_name represents the one column we want to get back.
  examples:
    - SELECT first_name FROM employees;
    - SELECT composer FROM tracks;
  tasks:
    - question: Return only the phone numbers of the customers table.
      answer: SELECT phone FROM customers;
    - question: Return only the titles of the albums table.
      answer: SELECT title FROM albums;
    - question: Return only the billing addresses of the invoices table.
      answer: SELECT billing_address FROM invoices;
    - question: Return only the artists name from the artists table.
      answer: SELECT name FROM artists;
    - question: Return only the albums title from the albums table.
      answer: SELECT title FROM albums;
    - question: Return only the playlists name from the playlist table.
      answer: SELECT name FROM playlists;
    - question: Return only the composer from the tracks table.
      answer: SELECT composer FROM tracks;
    - question: Return only the playlists name from the playlists table.
      answer: SELECT name FROM playlists;
    - question: Return only the last names from the customers table.
      answer: SELECT last_name FROM customer;
    - question: Return only the title of the employees from the employees table.
      answer: SELECT title FROM employees;
3:
  title: Select Multiple Columns
  text: >
    We can also select more than one column at a time. To do this, we'd use the following SQL statement:
    <b class="code">SELECT first_column_name, second_column_name FROM table_name;</b> where the comma
    separates each of the column names. You can create a comma-separated list of as many columns as you'd
    like to get back.
  examples:
    - "SELECT name, composer FROM tracks;"
    - "SELECT first_name, last_name, phone, email FROM employees;"
  tasks:
    - question: "Return the first name, last name, and company of every customer."
      answer: "SELECT first_name, last_name, company FROM customers;"
    - question: "Return the customer id and total from the invoices table."
      answer: "SELECT customer_id, total FROM invoices;"
    - question: "Return the bytes, milliseconds, and unit price of every track."
      answer: "SELECT bytes, milliseconds, unit_price FROM tracks;"
    - question: "Return the unit price and quantity of every invoice item."
      answer: "SELECT unit_price, quantity FROM invoice_items;"
    - question: "Return the album title and artist_id from the albums table."
      answer: "SELECT title, artist_id FROM albums;"
    - question: "Return first name, last name, title, and email address from the employees table."
      answer: "SELECT fist_name, last_name, title, email_address from employees;"
4:
  title: Filter Data Matching Exact Condition
  text: >
    So far, we have only been able to filter by column. What if we want to return only rows that match a
    specific condition? We can use WHERE to achieve that <b class="code">SELECT * FROM table_name WHERE
    column = condition;</b>.
  examples:
    - SELECT * from customers WHERE country = "Brazil";
    - SELECT first_name, last_name FROM employees WHERE reports_to = 2;
  tasks:
    - question: A friend of yours requests some James Brown music. Return all of the tracks where the composer is James Brown.
      answer: SELECT * FROM tracks WHERE composer = "James Brown";
    - question: In anticipation of a sale, you need to identify all tracks that are 1.99.
      answer: SELECT * from tracks where unit_price = 1.99;
    - question: There's a promotion for your customers who live in France. Return the first name, last name, and phone number of the customers you'll add to the telemarketing list.
      answer: SELECT first_name, last_name, phone FROM customers WHERE country = 'France';
    - question: There's a promotion for your customers who live in Ontario, Canada. Return the first name, last name, and phone number of the customers you'll add to the telemarketing list.
      answer: SELECT first_name, last_name, phone FROM customers WHERE state = 'ON';
    - question: There was a shipping mixup and every customer in the state of Arizona needs to be notified right away. Return the first name, last name and phone number of all customers in Arizona so they can be notified ASAP!
5:
  title: Calculation Functions
  text: >
    We've been returning the exact data specified by our search query up to this point. But what if we
    want to return data a calculation of some subset of data within out database like the number of rows
    returned by a query, or the average total of all our invoices? We can use sql functions like COUNT() and AVG()
    to find these values. <b class="code">SELECT AVG(column_name) FROM table_name;</b>.
  examples:
    - SELECT COUNT(*) FROM artists;
    - SELECT AVG(price) FROM invoices;
  tasks:
    - question: We need to know the number of employees. Return the number of employees in the employees table
      answer: SELECT COUNT(*) FROM employees;
    - question: A potential customer want's to know how many artists are tracked in our databse. Return the number of artists that are in the artist table.
      answer: SELECT COUNT(*) FROM artists;
    - question: The CEO want's to know how many customers we have. Return the number of customers in the database.
      answer: SELECT COUNT(*) FROM customers;
    - question: Now, the CEO want's to know how many customers there are only in Arizona. Return the number of customers in the state of AZ. (HINT Combine use filtering with exact match condition on a calucation function)
      answer: SELECT COUNT(*) FROM customers WHERE state = 'AZ';
    - question: We need to know the average length(milliseconds) of all tracks.
      answer: SELECT AVG(millisecond) FROM tracks;
    - question: We need to know the shortest track we have. (HINT length(milliseconds) of all tracks).
      answer: SELECT MIN(millisecond) FROM tracks;
    - question: We need to know the longest track we have. (HINT length(milliseconds) of all tracks).
      answer: SELECT MAX(millisecond) FROM tracks;
    - question: How much revenue have we had so far? Let's return the sum of all invoices in our databse.
      answer: SELECT SUM(total) FROM invoices;
6:
  title: Filter Data With Greater/Less Than Condition
  text: >
    Sometimes we want to scope down our query to a subset of data based on it's relation (larger or smaller) to a particular value. To do this we will
    use the WHERE clause and either a greater than (>), less than (<).  <b class="code">SELECT column_name FROM table_name WHERE column_name < condition ;</b>.
  examples:
    - SELECT * FROM tracks WHERE milliseconds < 30000;
    - SELECT name FROM artists WHERE LENGTH(name) < 4;
  tasks:
    - question: Find all tracks that are shorter than 1 minute (60000 milliseconds)
      answer: SELECT * FROM tracks WHERE milliseconds < 60000;
    - question: Find all employees born before Feburary 18th 1962. ('1962-02-18')
      answer: SELECT * FROM employees WHERE birth_date < '1962-02-18';
    - question: Find all employees born after Febuary 18th 1962. ('1962-02-18')
      answer: SELECT * FROM employees WHERE birth_date > '1962-02-18';
    - question: Find all Artists who have a name shorter than 5 characters. (HINT LENGTH())
      answer: SELECT * FROM artists WHERE LENGTH(name) < 5;
    - question: Find all Artists who have a name longer than 80 characters. (HINT LENGTH())
      answer: SELECT * FROM artists WHERE LENGTH(name) > 80;
    - question: Find all employees first and last names that where hired after January 1st 2004. (HINT '2004-01-01')
      answer: SELECT first_name, last_name FROM employees WHERE date_hired > '2004-01-01';
7:
  title: Filter Data With Partial Text Match
  text: >
    There are times that we want to structure a query for a partial match of text. Maybe we want all customers with a last name starting
    with a particular letter, or maybe we're not sure exactly how a thing is spelled. There are various reasons why we would want to query something
    based on a partial text match. To do this we can use WHERE and LIKE together to find data based on partial text. We use LIKE along with '%' or wildcards.
    The wilcard states that any values can go in place of the '%'. For example if I want a query to return 'cat' or 'cap' I would use LIKE 'ca%'. Or if you
    want to find all data that starts with a particular letter (T) we would use LIKE 'T%' <b class="code">SELECT column_name FROM table_name WHERE column_name LIKE '%condition%' ;</b>.
  examples:
    - SELECT name FROM artists WHERE name LIKE 'N%'
    - SELECT email FROM employees WHERE last_name LIKE 'C%';
  tasks:
    - question: We want email addresses back for all customers that have a last name that starts with a T.
      answer: SELECT email FROM customers WHERE last_name LIKE 'T%';
    - question: Can you return all artists that have a name that starts with a 'S'
      answer: SELECT * FROM artists WHERE name LIKE 'S%';
    - question: Can you find all artists that have an 'ay' anywhere in their name.
      answer: SELECT * FROM artists WHERE name LIKE '%ay%';
    - question: Can you find all the customers that have an email address that ends with 'gmail.com'
      answer: SELECT * FROM customers WHERE email LIKE '%gmail.com';
    - question: Can you return all the playlists that are titled with Classical in the name.
      answer: SELECT * FROM playlists WHERE name LIKE '%Classical%';
    - question: Find all tracks that have a name that contain 'way' anwhere within the name.
      answer: SELECT * FROM tracks WHERE name LIKE '%way%';


# aliasing columns
# ordering asc, desc
# combining strings using || ' ' ||
# self-referential joins
